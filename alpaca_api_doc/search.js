window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "alpaca_trade_api", "modulename": "alpaca_trade_api", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.common", "modulename": "alpaca_trade_api.common", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.common.URL", "modulename": "alpaca_trade_api.common", "qualname": "URL", "type": "class", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n", "bases": "builtins.str"}, {"fullname": "alpaca_trade_api.common.URL.__init__", "modulename": "alpaca_trade_api.common", "qualname": "URL.__init__", "type": "function", "doc": "<p>note: we use *value and v0 to allow an empty URL string</p>\n", "signature": "(cls, *value)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.DATE", "modulename": "alpaca_trade_api.common", "qualname": "DATE", "type": "class", "doc": "<p>date string in the format YYYY-MM-DD</p>\n", "bases": "builtins.str"}, {"fullname": "alpaca_trade_api.common.DATE.__init__", "modulename": "alpaca_trade_api.common", "qualname": "DATE.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.FLOAT", "modulename": "alpaca_trade_api.common", "qualname": "FLOAT", "type": "class", "doc": "<p>api allows passing floats or float as strings.\nlet's make sure that param passed is one of the two, so we don't pass\ninvalid strings all the way to the servers.</p>\n", "bases": "builtins.str"}, {"fullname": "alpaca_trade_api.common.FLOAT.__init__", "modulename": "alpaca_trade_api.common", "qualname": "FLOAT.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.get_base_url", "modulename": "alpaca_trade_api.common", "qualname": "get_base_url", "type": "function", "doc": "<p></p>\n", "signature": "() -> alpaca_trade_api.common.URL", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.get_data_url", "modulename": "alpaca_trade_api.common", "qualname": "get_data_url", "type": "function", "doc": "<p></p>\n", "signature": "() -> alpaca_trade_api.common.URL", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.get_data_stream_url", "modulename": "alpaca_trade_api.common", "qualname": "get_data_stream_url", "type": "function", "doc": "<p></p>\n", "signature": "() -> alpaca_trade_api.common.URL", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.get_credentials", "modulename": "alpaca_trade_api.common", "qualname": "get_credentials", "type": "function", "doc": "<p></p>\n", "signature": "(\n    key_id: str = None,\n    secret_key: str = None,\n    oauth: str = None\n) -> Tuple[str, str, str]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.common.get_api_version", "modulename": "alpaca_trade_api.common", "qualname": "get_api_version", "type": "function", "doc": "<p></p>\n", "signature": "(api_version: str) -> str", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity", "modulename": "alpaca_trade_api.entity", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity.Entity", "modulename": "alpaca_trade_api.entity", "qualname": "Entity", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n"}, {"fullname": "alpaca_trade_api.entity.Entity.__init__", "modulename": "alpaca_trade_api.entity", "qualname": "Entity.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity.Account", "modulename": "alpaca_trade_api.entity", "qualname": "Account", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/account/</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.AccountConfigurations", "modulename": "alpaca_trade_api.entity", "qualname": "AccountConfigurations", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/account-configuration/</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Asset", "modulename": "alpaca_trade_api.entity", "qualname": "Asset", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/assets/#asset-entity</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Order", "modulename": "alpaca_trade_api.entity", "qualname": "Order", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Order.__init__", "modulename": "alpaca_trade_api.entity", "qualname": "Order.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity.Position", "modulename": "alpaca_trade_api.entity", "qualname": "Position", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.AccountActivity", "modulename": "alpaca_trade_api.entity", "qualname": "AccountActivity", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/account-activities/</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Bar", "modulename": "alpaca_trade_api.entity", "qualname": "Bar", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/market-data/bars/</p>\n\n<h1 id=\"bars-entity\">bars-entity</h1>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Bars", "modulename": "alpaca_trade_api.entity", "qualname": "Bars", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "builtins.list"}, {"fullname": "alpaca_trade_api.entity.Bars.__init__", "modulename": "alpaca_trade_api.entity", "qualname": "Bars.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity.Bars.df", "modulename": "alpaca_trade_api.entity", "qualname": "Bars.df", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity.Trade", "modulename": "alpaca_trade_api.entity", "qualname": "Trade", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "_NanoTimestamped, Entity"}, {"fullname": "alpaca_trade_api.entity.Quote", "modulename": "alpaca_trade_api.entity", "qualname": "Quote", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n/#last-quote-entity</p>\n", "bases": "_NanoTimestamped, Entity"}, {"fullname": "alpaca_trade_api.entity.Clock", "modulename": "alpaca_trade_api.entity", "qualname": "Clock", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/clock/#clock-entity</p>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Calendar", "modulename": "alpaca_trade_api.entity", "qualname": "Calendar", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/calendar/</p>\n\n<h1 id=\"calendar-entity\">calendar-entity</h1>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.Watchlist", "modulename": "alpaca_trade_api.entity", "qualname": "Watchlist", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/watchlist/</p>\n\n<h1 id=\"watchlist-entity\">watchlist-entity</h1>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.PortfolioHistory", "modulename": "alpaca_trade_api.entity", "qualname": "PortfolioHistory", "type": "class", "doc": "<p>Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/portfolio-history/</p>\n\n<h1 id=\"portfoliohistory-entity\">portfoliohistory-entity</h1>\n", "bases": "Entity"}, {"fullname": "alpaca_trade_api.entity.PortfolioHistory.__init__", "modulename": "alpaca_trade_api.entity", "qualname": "PortfolioHistory.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity.PortfolioHistory.df", "modulename": "alpaca_trade_api.entity", "qualname": "PortfolioHistory.df", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity_v2", "modulename": "alpaca_trade_api.entity_v2", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity_v2.EntityListType", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityListType", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "alpaca_trade_api.entity_v2.EntityListType.Trade", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityListType.Trade", "type": "variable", "doc": "<p></p>\n", "default_value": " = <EntityListType.Trade: (<class 'alpaca_trade_api.entity.Trade'>, {'i': 'id', 'S': 'symbol', 'c': 'conditions', 'x': 'exchange', 'p': 'price', 's': 'size', 't': 'timestamp', 'z': 'tape', 'tks': 'takerside'})>"}, {"fullname": "alpaca_trade_api.entity_v2.EntityListType.Quote", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityListType.Quote", "type": "variable", "doc": "<p></p>\n", "default_value": " = <EntityListType.Quote: (<class 'alpaca_trade_api.entity.Quote'>, {'S': 'symbol', 'x': 'exchange', 'ax': 'ask_exchange', 'ap': 'ask_price', 'as': 'ask_size', 'bx': 'bid_exchange', 'bp': 'bid_price', 'bs': 'bid_size', 'c': 'conditions', 't': 'timestamp', 'z': 'tape'})>"}, {"fullname": "alpaca_trade_api.entity_v2.EntityListType.Bar", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityListType.Bar", "type": "variable", "doc": "<p></p>\n", "default_value": " = <EntityListType.Bar: (<class 'alpaca_trade_api.entity.Bar'>, {'S': 'symbol', 'x': 'exchange', 'o': 'open', 'h': 'high', 'l': 'low', 'c': 'close', 'v': 'volume', 't': 'timestamp', 'n': 'trade_count', 'vw': 'vwap'})>"}, {"fullname": "alpaca_trade_api.entity_v2.EntityList", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityList", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "builtins.list"}, {"fullname": "alpaca_trade_api.entity_v2.EntityList.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityList.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, entity_type: alpaca_trade_api.entity_v2.EntityListType, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.EntityList.df", "modulename": "alpaca_trade_api.entity_v2", "qualname": "EntityList.df", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity_v2.Remapped", "modulename": "alpaca_trade_api.entity_v2", "qualname": "Remapped", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity_v2.Remapped.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "Remapped.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, mapping: Dict[str, str], *args, **kwargs)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.BarsV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BarsV2", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "EntityList"}, {"fullname": "alpaca_trade_api.entity_v2.BarsV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BarsV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.TradesV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "TradesV2", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "EntityList"}, {"fullname": "alpaca_trade_api.entity_v2.TradesV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "TradesV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.QuotesV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "QuotesV2", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "EntityList"}, {"fullname": "alpaca_trade_api.entity_v2.QuotesV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "QuotesV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.TradeV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "TradeV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.TradeV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "TradeV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.QuoteV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "QuoteV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.QuoteV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "QuoteV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.BarV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BarV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.BarV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BarV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.StatusV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "StatusV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.StatusV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "StatusV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.LULDV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "LULDV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.LULDV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "LULDV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.CancelErrorV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "CancelErrorV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.CancelErrorV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "CancelErrorV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.CorrectionV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "CorrectionV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "Remapped, alpaca_trade_api.entity._NanoTimestamped, alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.CorrectionV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "CorrectionV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.SnapshotV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "SnapshotV2", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.entity_v2.SnapshotV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "SnapshotV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.SnapshotsV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "SnapshotsV2", "type": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "alpaca_trade_api.entity_v2.LatestBarsV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "LatestBarsV2", "type": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "alpaca_trade_api.entity_v2.LatestTradesV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "LatestTradesV2", "type": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "alpaca_trade_api.entity_v2.LatestQuotesV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "LatestQuotesV2", "type": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "alpaca_trade_api.entity_v2.BidOrAsk", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BidOrAsk", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.BidOrAsk.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "BidOrAsk.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.OrderbookV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "OrderbookV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.OrderbookV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "OrderbookV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.NewsV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "NewsV2", "type": "class", "doc": "<p>This helper class provides property access (the \"dot notation\")\nto the json object, backed by the original object stored in the _raw\nfield.</p>\n", "bases": "alpaca_trade_api.entity.Entity"}, {"fullname": "alpaca_trade_api.entity_v2.NewsV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "NewsV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.entity_v2.NewsListV2", "modulename": "alpaca_trade_api.entity_v2", "qualname": "NewsListV2", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "builtins.list"}, {"fullname": "alpaca_trade_api.entity_v2.NewsListV2.__init__", "modulename": "alpaca_trade_api.entity_v2", "qualname": "NewsListV2.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, raw)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest", "modulename": "alpaca_trade_api.rest", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.RetryException", "modulename": "alpaca_trade_api.rest", "qualname": "RetryException", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "alpaca_trade_api.rest.APIError", "modulename": "alpaca_trade_api.rest", "qualname": "APIError", "type": "class", "doc": "<p>Represent API related error.\nerror.status_code will have http status code.</p>\n", "bases": "builtins.Exception"}, {"fullname": "alpaca_trade_api.rest.APIError.__init__", "modulename": "alpaca_trade_api.rest", "qualname": "APIError.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, error, http_error=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.APIError.code", "modulename": "alpaca_trade_api.rest", "qualname": "APIError.code", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.APIError.status_code", "modulename": "alpaca_trade_api.rest", "qualname": "APIError.status_code", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.APIError.request", "modulename": "alpaca_trade_api.rest", "qualname": "APIError.request", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.APIError.response", "modulename": "alpaca_trade_api.rest", "qualname": "APIError.response", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit.Minute", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit.Minute", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeFrameUnit.Minute: 'Min'>"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit.Hour", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit.Hour", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeFrameUnit.Hour: 'Hour'>"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit.Day", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit.Day", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeFrameUnit.Day: 'Day'>"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit.Week", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit.Week", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeFrameUnit.Week: 'Week'>"}, {"fullname": "alpaca_trade_api.rest.TimeFrameUnit.Month", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrameUnit.Month", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeFrameUnit.Month: 'Month'>"}, {"fullname": "alpaca_trade_api.rest.TimeFrame", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.__init__", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, amount: int, unit: alpaca_trade_api.rest.TimeFrameUnit)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.amount", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.amount", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.unit", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.unit", "type": "variable", "doc": "<p></p>\n", "annotation": ": alpaca_trade_api.rest.TimeFrameUnit"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.value", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.value", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.validate", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.validate", "type": "function", "doc": "<p></p>\n", "signature": "(amount: int, unit: alpaca_trade_api.rest.TimeFrameUnit)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.Minute", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.Minute", "type": "variable", "doc": "<p></p>\n", "default_value": " = <alpaca_trade_api.rest.TimeFrame object>"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.Hour", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.Hour", "type": "variable", "doc": "<p></p>\n", "default_value": " = <alpaca_trade_api.rest.TimeFrame object>"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.Day", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.Day", "type": "variable", "doc": "<p></p>\n", "default_value": " = <alpaca_trade_api.rest.TimeFrame object>"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.Week", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.Week", "type": "variable", "doc": "<p></p>\n", "default_value": " = <alpaca_trade_api.rest.TimeFrame object>"}, {"fullname": "alpaca_trade_api.rest.TimeFrame.Month", "modulename": "alpaca_trade_api.rest", "qualname": "TimeFrame.Month", "type": "variable", "doc": "<p></p>\n", "default_value": " = <alpaca_trade_api.rest.TimeFrame object>"}, {"fullname": "alpaca_trade_api.rest.Sort", "modulename": "alpaca_trade_api.rest", "qualname": "Sort", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "alpaca_trade_api.rest.Sort.Asc", "modulename": "alpaca_trade_api.rest", "qualname": "Sort.Asc", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Sort.Asc: 'asc'>"}, {"fullname": "alpaca_trade_api.rest.Sort.Desc", "modulename": "alpaca_trade_api.rest", "qualname": "Sort.Desc", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Sort.Desc: 'desc'>"}, {"fullname": "alpaca_trade_api.rest.REST", "modulename": "alpaca_trade_api.rest", "qualname": "REST", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest.REST.__init__", "modulename": "alpaca_trade_api.rest", "qualname": "REST.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_data</strong>:  should we return api response raw or wrap it with\n             Entity objects.</li>\n</ul>\n", "signature": "(\n    self,\n    key_id: str = None,\n    secret_key: str = None,\n    base_url: alpaca_trade_api.common.URL = None,\n    api_version: str = None,\n    oauth=None,\n    raw_data: bool = False\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.post", "modulename": "alpaca_trade_api.rest", "qualname": "REST.post", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.put", "modulename": "alpaca_trade_api.rest", "qualname": "REST.put", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.patch", "modulename": "alpaca_trade_api.rest", "qualname": "REST.patch", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.delete", "modulename": "alpaca_trade_api.rest", "qualname": "REST.delete", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.data_get", "modulename": "alpaca_trade_api.rest", "qualname": "REST.data_get", "type": "function", "doc": "<p></p>\n", "signature": "(self, path, data=None, api_version='v1')", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_account", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_account", "type": "function", "doc": "<p>Get the account</p>\n", "signature": "(self) -> alpaca_trade_api.entity.Account", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_account_configurations", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_account_configurations", "type": "function", "doc": "<p>Get account configs</p>\n", "signature": "(self) -> alpaca_trade_api.entity.AccountConfigurations", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.update_account_configurations", "modulename": "alpaca_trade_api.rest", "qualname": "REST.update_account_configurations", "type": "function", "doc": "<p>alpaca.markets/docs/api-documentation/api-v2/account-configuration/\nUpdate account configs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dtbp_check</strong>:  both, entry, or exit</li>\n<li><strong>trade_confirm_email</strong>:  all or none</li>\n</ul>\n", "signature": "(\n    self,\n    no_shorting: bool = None,\n    dtbp_check: str = None,\n    trade_confirm_email: str = None,\n    suspend_trade: bool = None\n) -> alpaca_trade_api.entity.AccountConfigurations", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.list_orders", "modulename": "alpaca_trade_api.rest", "qualname": "REST.list_orders", "type": "function", "doc": "<p>Get a list of orders\nhttps://docs.alpaca.markets/web-api/orders/#get-a-list-of-orders</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>status</strong>:  open, closed or all. Defaults to open.</li>\n<li><strong>limit</strong>:  Defaults to 50 and max is 500</li>\n<li><strong>after</strong>:  timestamp</li>\n<li><strong>until</strong>:  timestamp</li>\n<li><strong>direction</strong>:  asc or desc.</li>\n<li><strong>params</strong>:  refer to documentation</li>\n<li><strong>nested</strong>:  should the data be nested like json</li>\n<li><strong>symbols</strong>:  list of str (symbols)</li>\n<li><strong>side</strong>:  Lets you filter to only 'buy' or 'sell' orders</li>\n</ul>\n", "signature": "(\n    self,\n    status: str = None,\n    limit: int = None,\n    after: str = None,\n    until: str = None,\n    direction: str = None,\n    params=None,\n    nested: bool = None,\n    symbols: List[str] = None,\n    side: str = None\n) -> List[alpaca_trade_api.entity.Order]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.submit_order", "modulename": "alpaca_trade_api.rest", "qualname": "REST.submit_order", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>symbol</strong>:  symbol or asset ID</li>\n<li><strong>qty</strong>:  float. Mutually exclusive with \"notional\".</li>\n<li><strong>side</strong>:  buy or sell</li>\n<li><strong>type</strong>:  market, limit, stop, stop_limit or trailing_stop</li>\n<li><strong>time_in_force</strong>:  day, gtc, opg, cls, ioc, fok</li>\n<li><strong>limit_price</strong>:  str of float</li>\n<li><strong>stop_price</strong>:  str of float</li>\n<li><strong>client_order_id</strong>: </li>\n<li><strong>extended_hours</strong>:  bool. If true, order will be eligible to execute\n   in premarket/afterhours.</li>\n<li><strong>order_class</strong>:  simple, bracket, oco or oto</li>\n<li><strong>take_profit</strong>:  dict with field \"limit_price\" e.g\n   {\"limit_price\": \"298.95\"}</li>\n<li><strong>stop_loss</strong>:  dict with fields \"stop_price\" and \"limit_price\" e.g\n   {\"stop_price\": \"297.95\", \"limit_price\": \"298.95\"}</li>\n<li><strong>trail_price</strong>:  str of float</li>\n<li><strong>trail_percent</strong>:  str of float</li>\n<li><strong>notional</strong>:  float. Mutually exclusive with \"qty\".</li>\n</ul>\n", "signature": "(\n    self,\n    symbol: str,\n    qty: float = None,\n    side: str = 'buy',\n    type: str = 'market',\n    time_in_force: str = 'day',\n    limit_price: str = None,\n    stop_price: str = None,\n    client_order_id: str = None,\n    extended_hours: bool = None,\n    order_class: str = None,\n    take_profit: dict = None,\n    stop_loss: dict = None,\n    trail_price: str = None,\n    trail_percent: str = None,\n    notional: float = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_order_by_client_order_id", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_order_by_client_order_id", "type": "function", "doc": "<p>Get an order by client order id</p>\n", "signature": "(self, client_order_id: str) -> alpaca_trade_api.entity.Order", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_order", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_order", "type": "function", "doc": "<p>Get an order</p>\n", "signature": "(\n    self,\n    order_id: str,\n    nested: bool = None\n) -> alpaca_trade_api.entity.Order", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.replace_order", "modulename": "alpaca_trade_api.rest", "qualname": "REST.replace_order", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>order_id</strong>: </li>\n<li><strong>qty</strong>:  str of int</li>\n<li><strong>limit_price</strong>:  str of float</li>\n<li><strong>stop_price</strong>:  str of float</li>\n<li><strong>trail</strong>:  str of float, represents trailing_price or\n   trailing_percent. determined by the original order.</li>\n<li><strong>time_in_force</strong>:  day, gtc, opg, cls, ioc, fok</li>\n</ul>\n\n<p>note: you cannot replace type of order. so, it was trailing_stop(e.g)\n      it will remain trailing_stop.</p>\n", "signature": "(\n    self,\n    order_id: str,\n    qty: str = None,\n    limit_price: str = None,\n    stop_price: str = None,\n    trail: str = None,\n    time_in_force: str = None,\n    client_order_id: str = None\n) -> alpaca_trade_api.entity.Order", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.cancel_order", "modulename": "alpaca_trade_api.rest", "qualname": "REST.cancel_order", "type": "function", "doc": "<p>Cancel an order</p>\n", "signature": "(self, order_id: str) -> None", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.cancel_all_orders", "modulename": "alpaca_trade_api.rest", "qualname": "REST.cancel_all_orders", "type": "function", "doc": "<p>Cancel all open orders</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.list_positions", "modulename": "alpaca_trade_api.rest", "qualname": "REST.list_positions", "type": "function", "doc": "<p>Get a list of open positions</p>\n", "signature": "(self) -> List[alpaca_trade_api.entity.Position]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_position", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_position", "type": "function", "doc": "<p>Get an open position</p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity.Position", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.close_position", "modulename": "alpaca_trade_api.rest", "qualname": "REST.close_position", "type": "function", "doc": "<p>Liquidates the position for the given symbol at market price</p>\n", "signature": "(\n    self,\n    symbol: str,\n    *,\n    qty: float = None\n) -> alpaca_trade_api.entity.Position", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.close_all_positions", "modulename": "alpaca_trade_api.rest", "qualname": "REST.close_all_positions", "type": "function", "doc": "<p>Liquidates all open positions at market price</p>\n", "signature": "(self) -> List[alpaca_trade_api.entity.Position]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.list_assets", "modulename": "alpaca_trade_api.rest", "qualname": "REST.list_assets", "type": "function", "doc": "<p>Get a list of assets</p>\n", "signature": "(\n    self,\n    status=None,\n    asset_class=None\n) -> List[alpaca_trade_api.entity.Asset]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_asset", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_asset", "type": "function", "doc": "<p>Get an asset</p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity.Asset", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_trades_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_trades_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Trade, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_trades", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_trades", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None\n) -> alpaca_trade_api.entity_v2.TradesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_quotes_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_quotes_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Quote, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_quotes", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None\n) -> alpaca_trade_api.entity_v2.QuotesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_bars_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_bars_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    timeframe: alpaca_trade_api.rest.TimeFrame,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    adjustment: str = 'raw',\n    limit: int = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Bar, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_bars", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_bars", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    timeframe: alpaca_trade_api.rest.TimeFrame,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    adjustment: str = 'raw',\n    limit: int = None\n) -> alpaca_trade_api.entity_v2.BarsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_bar", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.BarV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_bars", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbols: List[str]) -> alpaca_trade_api.entity_v2.LatestBarsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_trade", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_trade", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.TradeV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_trades", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_trades", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbols: List[str]) -> alpaca_trade_api.entity_v2.LatestTradesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_quote", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_quote", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.QuoteV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_quotes", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbols: List[str]) -> alpaca_trade_api.entity_v2.LatestQuotesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_snapshot", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_snapshot", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.SnapshotV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_snapshots", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_snapshots", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbols: List[str]) -> alpaca_trade_api.entity_v2.SnapshotsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_trades_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_trades_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Trade, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_trades", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_trades", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None\n) -> alpaca_trade_api.entity_v2.TradesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_quotes_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_quotes_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Quote, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_quotes", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None\n) -> alpaca_trade_api.entity_v2.QuotesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_bars_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_bars_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    timeframe: alpaca_trade_api.rest.TimeFrame,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity.Bar, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_bars", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_bars", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str]],\n    timeframe: alpaca_trade_api.rest.TimeFrame,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = None,\n    exchanges: Union[List[str], NoneType] = None\n) -> alpaca_trade_api.entity_v2.BarsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_bar", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str, exchange: str) -> alpaca_trade_api.entity_v2.BarV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_bars", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_bars", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbols: List[str],\n    exchange: str\n) -> alpaca_trade_api.entity_v2.LatestBarsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_trade", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_trade", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str, exchange: str) -> alpaca_trade_api.entity_v2.TradeV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_trades", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_trades", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbols: List[str],\n    exchange: str\n) -> alpaca_trade_api.entity_v2.LatestTradesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_quote", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_quote", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol: str, exchange: str) -> alpaca_trade_api.entity_v2.QuoteV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_quotes", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbols: List[str],\n    exchange: str\n) -> alpaca_trade_api.entity_v2.LatestQuotesV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_xbbo", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_xbbo", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    exchanges: Union[List[str], NoneType] = None\n) -> alpaca_trade_api.entity_v2.QuoteV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_xbbos", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_xbbos", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbols: List[str],\n    exchanges: Union[List[str], NoneType] = None\n) -> alpaca_trade_api.entity_v2.QuoteV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_crypto_snapshot", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_crypto_snapshot", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: str,\n    exchange: str\n) -> alpaca_trade_api.entity_v2.SnapshotV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_latest_crypto_snapshots", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_latest_crypto_snapshots", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbols: List[str],\n    exchange: str\n) -> alpaca_trade_api.entity_v2.SnapshotsV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_news_iter", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_news_iter", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str], NoneType] = None,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = 10,\n    sort: alpaca_trade_api.rest.Sort = <Sort.Desc: 'desc'>,\n    include_content: bool = False,\n    exclude_contentless: bool = False,\n    raw=False\n) -> Iterator[Union[alpaca_trade_api.entity_v2.NewsV2, dict]]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_news", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_news", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    symbol: Union[str, List[str], NoneType] = None,\n    start: Union[str, NoneType] = None,\n    end: Union[str, NoneType] = None,\n    limit: int = 10,\n    sort: alpaca_trade_api.rest.Sort = <Sort.Desc: 'desc'>,\n    include_content: bool = False,\n    exclude_contentless: bool = False\n) -> alpaca_trade_api.entity_v2.NewsListV2", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_clock", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_clock", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> alpaca_trade_api.entity.Clock", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_activities", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_activities", "type": "function", "doc": "<p>go to alpaca.markets/docs/api-documentation/api-v2/account-activities/</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>activity_types</strong>:  go to documnetation to see available types</li>\n<li><strong>until</strong>:  isoformat timestamp</li>\n<li><strong>after</strong>:  isoformat timestamp</li>\n<li><strong>direction</strong>:  asc or sesc. default is desc</li>\n<li><strong>date</strong>:  str. can't be sued with until/after</li>\n<li><strong>page_size</strong>: </li>\n<li><strong>page_token</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "(\n    self,\n    activity_types: str = None,\n    until: str = None,\n    after: str = None,\n    direction: str = None,\n    date: str = None,\n    page_size: int = None,\n    page_token: str = None\n) -> List[alpaca_trade_api.entity.AccountActivity]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_calendar", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_calendar", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start: isoformat date string eg '2006-01-02T15:04</strong>: 05Z' or\n   '2006-01-02'</li>\n<li><strong>end</strong>:  isoformat date string</li>\n</ul>\n", "signature": "(\n    self,\n    start: str = None,\n    end: str = None\n) -> List[alpaca_trade_api.entity.Calendar]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_watchlists", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_watchlists", "type": "function", "doc": "<p>Get the list of watchlists registered under the account</p>\n", "signature": "(self) -> List[alpaca_trade_api.entity.Watchlist]", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_watchlist", "type": "function", "doc": "<p>Get a watchlist identified by the ID</p>\n", "signature": "(self, watchlist_id: str) -> alpaca_trade_api.entity.Watchlist", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_watchlist_by_name", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_watchlist_by_name", "type": "function", "doc": "<p>Get a watchlist identified by its name</p>\n", "signature": "(self, watchlist_name: str) -> alpaca_trade_api.entity.Watchlist", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.create_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.create_watchlist", "type": "function", "doc": "<p>Create a new watchlist with an optional initial set of assets</p>\n", "signature": "(\n    self,\n    watchlist_name: str,\n    symbols=None\n) -> alpaca_trade_api.entity.Watchlist", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.add_to_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.add_to_watchlist", "type": "function", "doc": "<p>Add an asset to the watchlist</p>\n", "signature": "(\n    self,\n    watchlist_id: str,\n    symbol: str\n) -> alpaca_trade_api.entity.Watchlist", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.update_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.update_watchlist", "type": "function", "doc": "<p>Update a watchlist's name and/or asset list</p>\n", "signature": "(\n    self,\n    watchlist_id: str,\n    name: str = None,\n    symbols=None\n) -> alpaca_trade_api.entity.Watchlist", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.delete_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.delete_watchlist", "type": "function", "doc": "<p>Delete a watchlist identified by the ID permanently</p>\n", "signature": "(self, watchlist_id: str) -> None", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.delete_from_watchlist", "modulename": "alpaca_trade_api.rest", "qualname": "REST.delete_from_watchlist", "type": "function", "doc": "<p>Remove an asset from the watchlist's asset list</p>\n", "signature": "(self, watchlist_id: str, symbol: str) -> None", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.get_portfolio_history", "modulename": "alpaca_trade_api.rest", "qualname": "REST.get_portfolio_history", "type": "function", "doc": "<p>alpaca.markets/docs/api-documentation/api-v2/portfolio-history/</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>date_start</strong>:  YYYY-MM-DD</li>\n<li><strong>date_end</strong>:  YYYY-MM-DD</li>\n<li><strong>period</strong>:  The duration of the data in <number> + <unit>\n   such as 1D, where <unit> can be D for day, W for week,\n   M for month and A for year. Defaults to 1M.</li>\n<li><strong>timeframe</strong>:  The resolution of time window. 1Min, 5Min, 15Min,\n   1H, or 1D</li>\n<li><strong>extended_hours</strong>:  bool. If true, include extended hours in the\n   result.</li>\n</ul>\n", "signature": "(\n    self,\n    date_start: str = None,\n    date_end: str = None,\n    period: str = None,\n    timeframe=None,\n    extended_hours: bool = None\n) -> alpaca_trade_api.entity.PortfolioHistory", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.close", "modulename": "alpaca_trade_api.rest", "qualname": "REST.close", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest.REST.response_wrapper", "modulename": "alpaca_trade_api.rest", "qualname": "REST.response_wrapper", "type": "function", "doc": "<p>To allow the user to get raw response from the api, we wrap all\nfunctions with this method, checking if the user has set raw_data\nbool. if they didn't, we wrap the response with an Entity object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  response from server</li>\n<li><strong>entity</strong>:  derivative object of Entity</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "(self, obj, entity: alpaca_trade_api.entity.Entity)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest_async", "modulename": "alpaca_trade_api.rest_async", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.__init__", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_data</strong>:  should we return api response raw or wrap it with\n             Entity objects.</li>\n</ul>\n", "signature": "(\n    self,\n    key_id: str = None,\n    secret_key: str = None,\n    data_url: alpaca_trade_api.common.URL = None,\n    api_version: str = None,\n    raw_data: bool = False\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.get_bars_async", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.get_bars_async", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol, start, end, timeframe, limit=1000, adjustment='raw')", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.get_trades_async", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.get_trades_async", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol, start, end, limit=1000)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.get_quotes_async", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.get_quotes_async", "type": "function", "doc": "<p></p>\n", "signature": "(self, symbol, start, end, limit=1000)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.get_latest_trade_async", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.get_latest_trade_async", "type": "function", "doc": "<p>Get the latest trade for the given symbol</p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.TradeV2", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.rest_async.AsyncRest.get_latest_quote_async", "modulename": "alpaca_trade_api.rest_async", "qualname": "AsyncRest.get_latest_quote_async", "type": "function", "doc": "<p>Get the latest trade for the given symbol</p>\n", "signature": "(self, symbol: str) -> alpaca_trade_api.entity_v2.QuoteV2", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.rest_async.gather_with_concurrency", "modulename": "alpaca_trade_api.rest_async", "qualname": "gather_with_concurrency", "type": "function", "doc": "<p>when working with python function has limitations on the amount of tasks\nit could handle. for that purpose we use this method that splits the tasks.\nit's a bit slower, but gets the job done.\nFollow the example code to learn how to use that</p>\n", "signature": "(n, *tasks)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.stream", "modulename": "alpaca_trade_api.stream", "type": "module", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.stream.DataStream", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream", "type": "class", "doc": "<p></p>\n", "bases": "_DataStream"}, {"fullname": "alpaca_trade_api.stream.DataStream.__init__", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_id: str,\n    secret_key: str,\n    base_url: alpaca_trade_api.common.URL,\n    raw_data: bool,\n    feed: str = 'iex',\n    websocket_params: Union[Dict, NoneType] = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.subscribe_statuses", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.subscribe_statuses", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.subscribe_lulds", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.subscribe_lulds", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.unsubscribe_statuses", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.unsubscribe_statuses", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.unsubscribe_lulds", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.unsubscribe_lulds", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.register_handler", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.register_handler", "type": "function", "doc": "<p></p>\n", "signature": "(self, msg_type, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.DataStream.unregister_handler", "modulename": "alpaca_trade_api.stream", "qualname": "DataStream.unregister_handler", "type": "function", "doc": "<p></p>\n", "signature": "(self, msg_type, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.CryptoDataStream", "modulename": "alpaca_trade_api.stream", "qualname": "CryptoDataStream", "type": "class", "doc": "<p></p>\n", "bases": "_DataStream"}, {"fullname": "alpaca_trade_api.stream.CryptoDataStream.__init__", "modulename": "alpaca_trade_api.stream", "qualname": "CryptoDataStream.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_id: str,\n    secret_key: str,\n    base_url: alpaca_trade_api.common.URL,\n    raw_data: bool,\n    exchanges: Union[List[str], NoneType] = None,\n    websocket_params: Union[Dict, NoneType] = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.CryptoDataStream.subscribe_orderbooks", "modulename": "alpaca_trade_api.stream", "qualname": "CryptoDataStream.subscribe_orderbooks", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.CryptoDataStream.unsubscribe_orderbooks", "modulename": "alpaca_trade_api.stream", "qualname": "CryptoDataStream.unsubscribe_orderbooks", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.NewsDataStream", "modulename": "alpaca_trade_api.stream", "qualname": "NewsDataStream", "type": "class", "doc": "<p></p>\n", "bases": "_DataStream"}, {"fullname": "alpaca_trade_api.stream.NewsDataStream.__init__", "modulename": "alpaca_trade_api.stream", "qualname": "NewsDataStream.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_id: str,\n    secret_key: str,\n    base_url: alpaca_trade_api.common.URL,\n    raw_data: bool,\n    websocket_params: Union[Dict, NoneType] = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.NewsDataStream.subscribe_news", "modulename": "alpaca_trade_api.stream", "qualname": "NewsDataStream.subscribe_news", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.NewsDataStream.unsubscribe_news", "modulename": "alpaca_trade_api.stream", "qualname": "NewsDataStream.unsubscribe_news", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.TradingStream", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.stream.TradingStream.__init__", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_id: str,\n    secret_key: str,\n    base_url: alpaca_trade_api.common.URL,\n    raw_data: bool = False,\n    websocket_params: Union[Dict, NoneType] = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.TradingStream.subscribe_trade_updates", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream.subscribe_trade_updates", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.TradingStream.close", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream.close", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.stream.TradingStream.stop_ws", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream.stop_ws", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.stream.TradingStream.stop", "modulename": "alpaca_trade_api.stream", "qualname": "TradingStream.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream", "modulename": "alpaca_trade_api.stream", "qualname": "Stream", "type": "class", "doc": "<p></p>\n"}, {"fullname": "alpaca_trade_api.stream.Stream.__init__", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_id: str = None,\n    secret_key: str = None,\n    base_url: alpaca_trade_api.common.URL = None,\n    data_stream_url: alpaca_trade_api.common.URL = None,\n    data_feed: str = 'iex',\n    raw_data: bool = False,\n    crypto_exchanges: Union[List[str], NoneType] = None,\n    websocket_params: Union[Dict, NoneType] = None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_trade_updates", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_trade_updates", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_trades", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_trades", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    handler,\n    *symbols,\n    handler_cancel_errors=None,\n    handler_corrections=None\n)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_quotes", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_updated_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_updated_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_daily_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_daily_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_statuses", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_statuses", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_lulds", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_lulds", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_trades", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_trades", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_quotes", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_updated_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_updated_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_daily_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_daily_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_crypto_orderbooks", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_crypto_orderbooks", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.subscribe_news", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.subscribe_news", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_trade_update", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_trade_update", "type": "function", "doc": "<p></p>\n", "signature": "(self, func)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_trade", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_trade", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_quote", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_quote", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_updated_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_updated_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_daily_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_daily_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_status", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_status", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_luld", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_luld", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_cancel_error", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_cancel_error", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_correction", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_correction", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_trade", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_trade", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_quote", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_quote", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_updated_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_updated_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_daily_bar", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_daily_bar", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_crypto_orderbook", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_crypto_orderbook", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.on_news", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.on_news", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_trades", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_trades", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_quotes", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_updated_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_updated_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_daily_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_daily_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_statuses", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_statuses", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_lulds", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_lulds", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_trades", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_trades", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_quotes", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_quotes", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_updated_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_updated_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_daily_bars", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_daily_bars", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_crypto_orderbooks", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_crypto_orderbooks", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.unsubscribe_news", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.unsubscribe_news", "type": "function", "doc": "<p></p>\n", "signature": "(self, *symbols)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.run", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.run", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.stop_ws", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.stop_ws", "type": "function", "doc": "<p>Signal the ws connections to stop listenning to api stream.</p>\n", "signature": "(self)", "funcdef": "async def"}, {"fullname": "alpaca_trade_api.stream.Stream.stop", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "alpaca_trade_api.stream.Stream.is_open", "modulename": "alpaca_trade_api.stream", "qualname": "Stream.is_open", "type": "function", "doc": "<p>Checks if either of the websockets is open</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();